{"version":3,"sources":["components/Navbar.js","components/alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","for","onClick","toggleMode","role","placeholder","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","message","TextForm","useState","text","setText","htmlFor","heading","value","style","backgroundColor","onChange","event","target","rows","newText","document","getElementById","select","navigator","clipboard","writeText","split","length","toFixed","defaultProps","App","setMode","setalert","body","showAlert","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6aaa86c8.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n//   let mode='';\r\n  \r\n//   if(props.mode==='light')\r\n//   {\r\n//     mode='dark';\r\n    \r\n//   }\r\n//   else{mode='light';\r\n  \r\n// }\r\n    return (\r\n        <div>\r\n           <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    { <a className=\"navbar-brand\" href=\"#\">{props.title}</a>  /*THIS IS CALLED PROPS MEANS PROPERTIES WHICH WE ARE PASSING TO COMPONENTS */}\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n         \r\n      \r\n      <div className=\"form-check form-switch\">\r\n      <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} for=\"flexSwitchCheckDefault\">Black</label>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      \r\n    </div>\r\n    <div className=\"form-check form-switch\">\r\n      <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} for=\"flexSwitchCheckDefault\">Green</label>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      \r\n    </div>\r\n    <div className=\"form-check form-switch\">\r\n      <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} for=\"flexSwitchCheckDefault\">Blue</label>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      \r\n    </div>\r\n    <form className=\"d-flex mx-3\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={title: PropTypes.string.isRequired};//isRequired MEANS TITLE PROP MUST BE THERE IN THE COMPONENT\r\nNavbar.defaultProps={title: \"User\"};// TO SET THE DEFAULT VALUES OF PROPS ","import React from 'react'\r\n\r\nexport default function alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        \r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {capitalize(props.alert.type)} <strong>{props.alert.message}</strong>\r\n              \r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText]=useState(\"\"); \r\n    // text=\"hello\"; WRONG WAY TO CHANGE THE STATE TO CHANGE THE STATE WE ALWAYS HAVE TO USE THE setText() funtion\r\n    //Correct way to set the state\r\n    const handleUpperCase=()=>{\r\n        \r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.alert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n    const handleLowerCase=()=>{\r\n        \r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.alert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleClear=()=>{\r\n        \r\n        let newText=\"\";\r\n        setText(newText);\r\n        props.alert(\"Txt cleared\",\"success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        \r\n        setText(event.target.value);\r\n        // props.alert(\"Converted to uppercase\",\"success\");\r\n    }\r\n    const handleCopy=()=>\r\n    {\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.alert(\"Text Copied \",\"success\");\r\n    }\r\n\r\n    // const handleSpaces=()=>{\r\n    //     let newText=text.split(/[ ]+/);\r\n    //     setText(newText);\r\n    // }\r\n    return (\r\n        <>\r\n        <div className=\"container\">   \r\n            \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"myBox\" className=\"form-label\"><h3 className={`text-${props.mode==='light'?'dark':'light'}`}>{props.heading}</h3></label>\r\n                 <textarea value={text} className='form-control' style={{backgroundColor:props.mode==='light'?'dark':'light'}} onChange={handleOnChange} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className={`btn btn-${props.mode==='light'?'dark':'light'}`}  onClick={handleUpperCase} >Convert to Uppercase</button>\r\n            <button className={`btn mx-3 btn-${props.mode==='light'?'dark':'light'}`} onClick={handleLowerCase} >Convert to Lowercase</button>\r\n            <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} onClick={handleClear} >Clear Text</button>\r\n            <button className={`btn mx-3 btn-${props.mode==='light'?'dark':'light'}`} onClick={handleCopy} >Copy</button>\r\n             \r\n        </div>\r\n        <div className=\" my-3\">\r\n        <div className=\"container\">\r\n            <h2 className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n                Your Text Summary\r\n            </h2>\r\n            <p className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n                {(text.split(\" \").length)-1} Words, {text.length} Characters \r\n                \r\n            </p>\r\n            <p className={`text-${props.mode==='light'?'dark':'light'}`}><strong>{(0.008 *((text.split(\" \").length)-1)).toFixed(2)} Minutes To read</strong></p>\r\n\r\n        </div>\r\n        <div className=\"container\">\r\n        <h2 className={`text-${props.mode==='light'?'dark':'light'}`}>Preview :</h2>\r\n            <p className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n                {text===''?'Enter your text to preview':text}\r\n            </p>\r\n        </div>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes={heading :PropTypes.string.isRequired};","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Alert from './components/alert';\n// import About from './components/About';\n\nimport React, { useState } from 'react'\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n  \n// } from \"react-router-dom\";\n// import About from './components/About';\nimport TextForm from './components/TextForm';\n\n\n\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n  const toggleMode=()=>{\n    if(mode===\"light\")\n    {setMode(\"dark\");\n    document.body.style.backgroundColor='#434444';\n    showAlert(\"Dark Mode is Enabled\",\"success\");\n    document.title=\"TextUtils - Dark Mode\";\n  }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode is Enabled\",\"success\");\n      document.title=\"TextUtils - light Mode\";\n    }\n\n  }\n  const showAlert=(message,type)=>{\n    setalert(\n      {\n        message:message,\n        type:type\n      }\n    )\n\n    setTimeout(() => {\n      setalert(null);\n      \n    }, 2000);\n\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}></Alert>\n      <div className=\"container my-3\">\n      \n        {/* <Routes>\n            <Route exact path=\"/about\" element={<About />}>\n            </Route>\n            <Route exact path=\"/\" element={< TextForm heading=\"Enter the text Here : \" mode={mode} alert={showAlert} toggleMode={toggleMode} />}>\n            </Route>\n          </Routes> */}\n          < TextForm heading=\"Enter the text Here : \" mode={mode} alert={showAlert} toggleMode={toggleMode} />\n          \n      </div>\n      \n      {/* </Router> */}\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}